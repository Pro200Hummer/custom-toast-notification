{"version":3,"sources":["context/context-types.ts","context/ToastContext.tsx","components/Toast.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","ToastContext","createContext","ToastContextProvider","props","useReducer","state","action","type","payload","filter","s","id","dispatch","Provider","value","children","Toast","memo","console","log","position","autoDeleteInterval","useContext","generateIcon","generateBackgroundColor","deleteToast","useCallback","DELETE_NOTIFICATION","className","map","n","setTimeout","style","backgroundColor","onClick","title","message","App","useState","setPosition","buttonHandler","ADD_NOTIFICATION","v1","name","onChange","e","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e4b9d0a.chunk.js","sourcesContent":["export type ToastType = 'SUCCESS' | 'ERROR' | 'INFO' | 'WARNING'\r\nexport type NotificationType = {\r\n    id: string\r\n    type: ToastType\r\n    title: string\r\n    message: string\r\n}\r\nexport type Notifications = NotificationType[]\r\n\r\nexport enum ActionType {\r\n    ADD_NOTIFICATION = 'ADD_NOTIFICATION',\r\n    DELETE_NOTIFICATION = 'DELETE_NOTIFICATION'\r\n}\r\n\r\ntype AddNotification = {\r\n    type: ActionType.ADD_NOTIFICATION\r\n    payload: NotificationType\r\n}\r\n\r\ntype DeleteNotification = {\r\n    type: ActionType.DELETE_NOTIFICATION\r\n    payload: string\r\n}\r\n\r\nexport type ToastActions = AddNotification | DeleteNotification","import React, {createContext, Dispatch, useReducer} from 'react';\r\nimport {Notifications, ToastActions} from \"./context-types\";\r\n\r\nexport const ToastContext = createContext<[Notifications, Dispatch<ToastActions>]>([[], () => {}]);\r\n\r\nexport const ToastContextProvider = (props: any) => {\r\n\r\n    const notifications: Notifications = []\r\n\r\n    const [state, dispatch] = useReducer((state: Notifications, action: ToastActions) => {\r\n        switch (action.type) {\r\n            case 'ADD_NOTIFICATION':\r\n                return [...state, action.payload]\r\n            case 'DELETE_NOTIFICATION':\r\n                return state.filter(s => s.id !== action.payload)\r\n            default:\r\n                return state\r\n        }\r\n    }, notifications)\r\n\r\n    return (\r\n        <ToastContext.Provider value={[state, dispatch]}>\r\n            {props.children}\r\n        </ToastContext.Provider>\r\n    )\r\n}\r\n\r\n\r\n","import React, {FC, memo, useCallback, useContext} from 'react';\r\nimport {ToastContext} from \"../context/ToastContext\";\r\nimport './Toast.css';\r\nimport {ActionType, ToastType} from \"../context/context-types\";\r\nimport {FaCheck, FaExclamationCircle, FaExclamationTriangle, FaInfoCircle, FaRegWindowClose} from \"react-icons/all\";\r\n\r\ntype ToastPropsType = {\r\n    position: string\r\n    autoDeleteInterval: number\r\n}\r\n\r\nexport const Toast: FC<ToastPropsType> = memo(props => {\r\n    console.log(\"Toast render\")\r\n    debugger\r\n    const {position, autoDeleteInterval} = props\r\n\r\n    const [state, dispatch] = useContext(ToastContext);\r\n\r\n    const generateIcon = (type: ToastType) => {\r\n        switch (type) {\r\n            case 'SUCCESS':\r\n                return <FaCheck/>\r\n            case 'INFO':\r\n                return <FaInfoCircle/>\r\n            case 'WARNING':\r\n                return <FaExclamationTriangle/>\r\n            case 'ERROR':\r\n                return <FaExclamationCircle/>\r\n            default:\r\n                return\r\n        }\r\n    }\r\n    const generateBackgroundColor = (type: ToastType) => {\r\n        switch (type) {\r\n            case 'SUCCESS':\r\n                return '#2AA80AFF'\r\n            case 'INFO':\r\n                return '#10b795'\r\n            case 'WARNING':\r\n                return '#CCAA07FF'\r\n            case 'ERROR':\r\n                return '#CC0707FF'\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    const deleteToast = useCallback((id: string) => {\r\n        dispatch({type: ActionType.DELETE_NOTIFICATION, payload: id})\r\n    },[dispatch])\r\n\r\n    return (\r\n        <div className={`notification-container ${position}`}>\r\n            {state.map(n => {\r\n                setTimeout(() => {\r\n                    deleteToast(n.id)\r\n                }, autoDeleteInterval)\r\n                return (\r\n                    <div\r\n                        key={n.id}\r\n                        className='notification toast'\r\n                        style={{backgroundColor: generateBackgroundColor(n.type)}}\r\n                    >\r\n                        <FaRegWindowClose className='close-button' onClick={() => deleteToast(n.id)}/>\r\n                        <div className='notification-image'>\r\n                            {generateIcon(n.type)}\r\n                        </div>\r\n                        <div>\r\n                            <p className='notification-title'>{n.title}</p>\r\n                            <p className='notification-message'>{n.message}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n});","import React, {ChangeEvent, useContext, useState} from 'react';\r\nimport {Toast} from \"./components/Toast\";\r\nimport {ToastContext} from \"./context/ToastContext\";\r\nimport {ActionType} from \"./context/context-types\";\r\nimport {v1} from \"uuid\";\r\nimport \"./Main.css\";\r\n\r\nexport const App = () => {\r\n    const [position, setPosition] = useState<string>('top-left')\r\n    const [, dispatch] = useContext(ToastContext)\r\n\r\n    const buttonHandler = (type: string) => {\r\n        switch (type){\r\n            case 'SUCCESS':\r\n                return dispatch({\r\n                    type: ActionType.ADD_NOTIFICATION,\r\n                    payload:{id: v1(), type:\"SUCCESS\", title:'Success Title', message: 'Success message'}\r\n                })\r\n            case 'ERROR':\r\n                return dispatch({\r\n                    type: ActionType.ADD_NOTIFICATION,\r\n                    payload:{id: v1(), type:\"ERROR\", title:'Error Title', message: 'Error message'}\r\n                })\r\n            case 'INFO':\r\n                return dispatch({\r\n                    type: ActionType.ADD_NOTIFICATION,\r\n                    payload:{id: v1(), type:\"INFO\", title:'Info Title', message: 'Info message'}\r\n                })\r\n            case 'WARNING':\r\n                return dispatch({\r\n                    type: ActionType.ADD_NOTIFICATION,\r\n                    payload:{id: v1(), type:\"WARNING\", title:'Warning Title', message: 'Warning message'}\r\n                })\r\n        }\r\n    }\r\n\r\n    const positionHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        setPosition(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className='wrapper'>\r\n            <div className='main-content'>\r\n                <div className='buttons'>\r\n                    <button onClick={() => buttonHandler('SUCCESS')} className='btn-success'>SUCCESS</button>\r\n                    <button onClick={() => buttonHandler('ERROR')} className='btn-error'>ERROR</button>\r\n                    <button onClick={() => buttonHandler('INFO')} className='btn-info'>INFO</button>\r\n                    <button onClick={() => buttonHandler('WARNING')} className='btn-warning'>WARNING</button>\r\n                </div>\r\n                <select\r\n                    name=\"position-selector\"\r\n                    value={position}\r\n                    onChange={positionHandler}\r\n                    className='position-select'\r\n                >\r\n                    <option value=\"top-left\">Top-Left</option>\r\n                    <option value=\"top-right\">Top-Right</option>\r\n                    <option value=\"bottom-left\">Bottom-Left</option>\r\n                    <option value=\"bottom-right\">Bottom-Right</option>\r\n                </select>\r\n            </div>\r\n            <Toast position={position} autoDeleteInterval={3000}/>\r\n        </div>\r\n    );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {ToastContextProvider} from \"./context/ToastContext\";\r\n\r\nReactDOM.render(\r\n  <ToastContextProvider>\r\n    <App />\r\n  </ToastContextProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}